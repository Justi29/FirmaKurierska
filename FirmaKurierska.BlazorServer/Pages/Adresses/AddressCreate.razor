@page "/address/create"
@inject IAddressService _addressService
@inject NavigationManager _navigationManager

<PageTitle>Create address</PageTitle>
<h1>Create address</h1>

<EditForm Model="@_address" OnValidSubmit="@CreateAddress">
    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="@true" />
    <ValidationSummary />
    <div class="form-group">
        <label>Country: </label>
        <InputText @bind-Value="@_address.Country" class="form-control" />
        <ValidationMessage For="@(() => _address.Country)" />
    </div>
    <div class="form-group">
        <label>City: </label>
        <InputText @bind-Value="@_address.City" class="form-control" />
        <ValidationMessage For="@(() => _address.City)" />
    </div>
    <div class="form-group">
        <label>PostCode: </label>
        <InputText @bind-Value="@_address.PostCode" class="form-control" />
        <ValidationMessage For="@(() => _address.PostCode)" />
    </div>
    <div class="form-group">
        <label>Street: </label>
        <InputText @bind-Value="@_address.Street" class="form-control" />
        <ValidationMessage For="@(() => _address.Street)" />
    </div>
    <br />
    <div class="form-group">
        <button class="btn btn-primary" type="submit"> <span class="oi oi-plus"></span> Create </button>
        <button @onclick="BackToList" class="btn btn-secondary" type="button">
            <span class="oi oi-media-skip-backward" />
            Back To List
        </button>
    </div>
</EditForm>

@code {
    private FluentValidationValidator? _fluentValidationValidator;
    private AddressDto _address = new AddressDto();

    private void CreateAddress()
    {
        var newId = _addressService.Create(_address);
        _navigationManager.NavigateTo($"/address");
    }

    private void BackToList()
    {
        _navigationManager.NavigateTo("/address");
    }
}
