@page "/courier/edit/{id:int}"
@using FirmaKurierska.BlazorServer.Service
@inject ICourierService _courierService
@inject IFileService _fileService
@inject NavigationManager _navigationManager

<PageTitle>Edit courier</PageTitle>
<h1>Edit courier</h1>

<EditForm Model="@_courier" OnValidSubmit="@UpdateCourier">
    <FluentValidationValidator @ref="_fluentValidationValidator" DisableAssemblyScanning="@true" />
    <ValidationSummary />
    <div class="form-group">
        <label>Name: </label>
        <InputText @bind-Value="@_courier.Name" class="form-control" />
        <ValidationMessage For="@(() => _courier.Name)" />
    </div>
    <div class="form-group">
        <label>Surname: </label>
        <InputText @bind-Value="@_courier.Surname" class="form-control" />
        <ValidationMessage For="@(() => _courier.Surname)" />
    </div>
    <div class="form-group">
        <label>PhoneNumber: </label>
        <InputText @bind-Value="@_courier.PhoneNumber" class="form-control" />
        <ValidationMessage For="@(() => _courier.PhoneNumber)" />
    </div>
    <div class="form-group">
        <label>Email: </label>
        <InputText @bind-Value="@_courier.Email" class="form-control" />
        <ValidationMessage For="@(() => _courier.Email)" />
    </div>
    <div class="form-group">
        <label>Image: </label>
        <InputFile OnChange="HandleImageUpload"></InputFile>
    </div>

    <br />
    <div class="form-group">
        <button class="btn btn-primary" type="submit"> <span class="oi oi-pencil"></span> Update </button>
        <button @onclick="BackToList" class="btn btn-secondary" type="button">
            <span class="oi oi-media-skip-backward"></span>
            Back To List
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    private FluentValidationValidator? _fluentValidationValidator;
    private CourierDto _courier = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var c = _courierService.GetById(Id);
        _courier = new CourierDto()
            {
                Id = c.Id,
                Name = c.Name,
                Surname = c.Surname,
                PhoneNumber = c.PhoneNumber,
                Email = c.Email,
                ImageUrl = c.ImageUrl
            };
    }

    private void UpdateCourier()
    {
        _courierService.Update(_courier);
        _navigationManager.NavigateTo("/courier");
    }

    private void BackToList()
    {
        _navigationManager.NavigateTo("/courier");
    }
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        if (e.GetMultipleFiles().Count > 0)
        {
            foreach (var file in e.GetMultipleFiles())
            {
                System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                if (fileInfo.Extension.ToLower() == ".jpg" ||
                fileInfo.Extension.ToLower() == ".png" ||
                fileInfo.Extension.ToLower() == ".jpeg")
                {
                    _courier.ImageUrl = await _fileService.UploadFile(file);
                    _courierService.Update(_courier);
                }
                else
                {
                    // komunikat o błędzie
                    return;
                }
            }
        }
    }


}
