@page "/deliveries"
@inject IOrderService OrderService
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject AppState _appState

<PageTitle>Deliveries</PageTitle>

<div>
    <h2>My Deliveries</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Status</th>
                <th>Size</th>
                <th>PickupLocation</th>
                <th>Destination</th>
                <th>ShippingDate</th>
                <th>PickupDate</th>
                <th>DeliveryDate</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in _orderList)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.Status</td>
                    <td>@order.Size</td>
                    <td>@order.PickupLocation.Street, @order.PickupLocation.City, @order.PickupLocation.PostCode, @order.PickupLocation.Country</td>
                    <td>@order.Destination.Street, @order.Destination.City, @order.Destination.PostCode, @order.Destination.Country</td>
                    <td>@order.ShippingDate.ToString("yyyy-MM-dd")</td>
                    <td>@(order.PickupDate.HasValue ? order.PickupDate.Value.ToString("yyyy-MM-dd") : "-")</td>
                    <td>@(order.DeliveryDate.HasValue ? order.DeliveryDate.Value.ToString("yyyy-MM-dd") : "-")</td>
                    <td>
                        @if (!order.PickupDate.HasValue)
                        {
                            <button class="btn btn-warning" @onclick="@(() => PickUpOrder(order.Id))">
                                <span aria-hidden="true"></span>
                                Pick Up
                            </button>
                        }
                        else if (order.PickupDate.HasValue && !order.DeliveryDate.HasValue)
                        {
                            <button class="btn btn-success" @onclick="@(() => DeliverOrder(order.Id))">
                                <span aria-hidden="true"></span>
                                Deliver
                            </button>
                        } else
                        {
                            <div>Order was delivered </div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private List<OrderDto> _orderList = new List<OrderDto>();

    protected override async Task OnInitializedAsync()
    {
        if (_appState.CourierId.HasValue)
        {
            _orderList = (await OrderService.GetAllForCourier(_appState.CourierId.Value)).ToList();
        }
    }
    private async Task PickUpOrder(int orderId)
    {
        if (_appState.CourierId.HasValue)
        {
            var updateDto = new UpdateOrderDto { Id = orderId, PickupDate = DateTime.Now, Status = Domain.Models.OrderStatus.OutForDelivery };
            var success = await OrderService.UpdateOrder(updateDto);
            if (success)
            {
                _orderList = (await OrderService.GetAllForCourier(_appState.CourierId.Value)).ToList();
            }
            else
            {
                await Js.InvokeVoidAsync("alert", "Failed to update the order.");
            }
        }
    }

    private async Task DeliverOrder(int orderId)
    {
        if (_appState.CourierId.HasValue)
        {
            var updateDto = new UpdateOrderDto { Id = orderId, DeliveryDate = DateTime.Now, Status = Domain.Models.OrderStatus.Delivered };
            var success = await OrderService.UpdateOrder(updateDto);
            if (success)
            {
                _orderList = (await OrderService.GetAllForCourier(_appState.CourierId.Value)).ToList();
            }
            else
            {
                await Js.InvokeVoidAsync("alert", "Failed to update the order.");
            }
        }
    }
}

