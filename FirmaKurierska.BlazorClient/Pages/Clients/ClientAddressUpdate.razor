@page "/address/edit/{id:int}"
@inject IAddressService _addressService
@inject NavigationManager _navigationManager

<PageTitle>Edit Address</PageTitle>
<h1>Edit Address</h1>

<EditForm Model="@_address" OnValidSubmit="@UpdateAddress">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Country: </label>
        <InputText @bind-Value="@_address.Country" class="form-control" />
        <ValidationMessage For="@(() => _address.Country)" />
    </div>
    <div class="form-group">
        <label>City: </label>
        <InputText @bind-Value="@_address.City" class="form-control" />
        <ValidationMessage For="@(() => _address.City)" />
    </div>
    <div class="form-group">
        <label>PostCode: </label>
        <InputText @bind-Value="@_address.PostCode" class="form-control" />
        <ValidationMessage For="@(() => _address.PostCode)" />
    </div>
    <div class="form-group">
        <label>Street: </label>
        <InputText @bind-Value="@_address.Street" class="form-control" />
        <ValidationMessage For="@(() => _address.Street)" />
    </div>
    <br />
    <div class="form-group">
        <button class="btn btn-primary" type="submit"> <span class="oi oi-pencil"></span> Update </button>
        <button @onclick="BackToList" class="btn btn-secondary" type="button">
            <span class="oi oi-media-skip-backward" />
            Back To List
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private UpdateAddressDto _address = new UpdateAddressDto();

    protected override async Task OnInitializedAsync()
    {
        var address = await _addressService.GetById(Id);
        if (address != null)
        {
            _address = new UpdateAddressDto
                {
                    Id = (int)address.Id,
                    Country = address.Country,
                    City = address.City,
                    PostCode = address.PostCode,
                    Street = address.Street
                };
        }
    }

    private async Task UpdateAddress()
    {
        await _addressService.UpdateAddress(_address);
        _navigationManager.NavigateTo("/client/addresses");
    }

    private void BackToList()
    {
        _navigationManager.NavigateTo("/client/addresses");
    }
}
